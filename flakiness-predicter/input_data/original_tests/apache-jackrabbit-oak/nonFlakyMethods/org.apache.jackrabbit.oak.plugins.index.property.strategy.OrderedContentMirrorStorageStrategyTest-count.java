@Test public void count() throws IllegalArgumentException, RepositoryException {
  OrderedContentMirrorStoreStrategy store=new OrderedContentMirrorStoreStrategy();
  OrderedContentMirrorStoreStrategy descendingStore=new OrderedContentMirrorStoreStrategy(OrderDirection.DESC);
  final String orderedProperty="fooprop";
  final String testAscendingName="testascending";
  final String testDescendingName="testdescending";
  final int numberOfNodes=1000;
  final int maxNodeCount=100;
  NodeBuilder builder=EmptyNodeState.EMPTY_NODE.builder();
  IndexUtils.createIndexDefinition(builder.child(IndexConstants.INDEX_DEFINITIONS_NAME),testAscendingName,false,ImmutableList.of(orderedProperty),null,OrderedIndex.TYPE,ImmutableMap.<String,String>of());
  IndexUtils.createIndexDefinition(builder.child(IndexConstants.INDEX_DEFINITIONS_NAME),testDescendingName,false,ImmutableList.of(orderedProperty),null,OrderedIndex.TYPE,ImmutableMap.<String,String>of(OrderedIndex.DIRECTION,OrderDirection.DESC.getDirection()));
  NodeBuilder ascendingContent=builder.getChildNode(IndexConstants.INDEX_DEFINITIONS_NAME).getChildNode(testAscendingName).child(IndexConstants.INDEX_CONTENT_NODE_NAME);
  NodeBuilder descendingContent=builder.getChildNode(IndexConstants.INDEX_DEFINITIONS_NAME).getChildNode(testDescendingName).child(IndexConstants.INDEX_CONTENT_NODE_NAME);
  for (int i=0; i < numberOfNodes; i++) {
    store.update(ascendingContent,"/foo/bar",EMPTY_KEY_SET,newHashSet("x" + NF.format(i)));
    descendingStore.update(descendingContent,"/foo/bar",EMPTY_KEY_SET,newHashSet("x" + NF.format(i)));
  }
  assertEquals("wrong number of nodes encountered",numberOfNodes,Iterables.size(store.getChildNodeEntries(ascendingContent.getNodeState())));
  assertEquals("wrong number of nodes encountered",numberOfNodes,Iterables.size(descendingStore.getChildNodeEntries(descendingContent.getNodeState())));
  NodeState ascendingMeta=builder.getChildNode(IndexConstants.INDEX_DEFINITIONS_NAME).getChildNode(testAscendingName).getNodeState();
  NodeState descendingMeta=builder.getChildNode(IndexConstants.INDEX_DEFINITIONS_NAME).getChildNode(testDescendingName).getNodeState();
  Filter.PropertyRestriction pr=null;
  String value="x" + NF.format(11);
  pr=new Filter.PropertyRestriction();
  pr.first=PropertyValues.newString(value);
  pr.last=PropertyValues.newString(value);
  pr.firstIncluding=true;
  pr.lastIncluding=true;
  assertEquals(1,store.count(ascendingMeta,pr,maxNodeCount));
  assertEquals(1,descendingStore.count(descendingMeta,pr,maxNodeCount));
  pr=new Filter.PropertyRestriction();
  pr.first=null;
  pr.last=null;
  pr.firstIncluding=false;
  pr.lastIncluding=false;
  assertTrue(store.count(ascendingMeta,pr,maxNodeCount) > 0);
  assertEquals(store.count(ascendingMeta,pr,maxNodeCount),descendingStore.count(descendingMeta,pr,maxNodeCount));
  pr=new Filter.PropertyRestriction();
  pr.first=PropertyValues.newString(value);
  pr.last=null;
  pr.firstIncluding=false;
  pr.lastIncluding=false;
  assertTrue(store.count(ascendingMeta,pr,maxNodeCount) > 0);
  assertTrue(descendingStore.count(ascendingMeta,pr,maxNodeCount) > 0);
  pr=new Filter.PropertyRestriction();
  pr.first=PropertyValues.newString(value);
  pr.last=null;
  pr.firstIncluding=true;
  pr.lastIncluding=false;
  assertTrue(store.count(ascendingMeta,pr,maxNodeCount) > 0);
  assertTrue(descendingStore.count(ascendingMeta,pr,maxNodeCount) > 0);
  pr=new Filter.PropertyRestriction();
  pr.first=null;
  pr.last=PropertyValues.newString(value);
  pr.firstIncluding=false;
  pr.lastIncluding=false;
  assertTrue(descendingStore.count(descendingMeta,pr,maxNodeCount) > 0);
  assertTrue(store.count(ascendingMeta,pr,maxNodeCount) > 0);
  pr=null;
  assertTrue(store.count(ascendingMeta,pr,maxNodeCount) > 0);
  assertEquals(store.count(ascendingMeta,pr,maxNodeCount),descendingStore.count(descendingMeta,pr,maxNodeCount));
}
