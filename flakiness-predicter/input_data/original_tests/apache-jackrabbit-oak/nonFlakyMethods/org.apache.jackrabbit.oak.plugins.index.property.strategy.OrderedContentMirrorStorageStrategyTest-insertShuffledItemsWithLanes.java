/** 
 * Testing The Insert Of Shuffled Items And Lanes Recreating The Following Index Structure <Code> List Structure ============== (Above The Node Names Is The Insert Order) 9   5   6   4   7   1   0   3   10  2   12  11  8 ----------------------------------------------------------- Str 000 001 002 003 004 005 006 007 008 009 010 011 012 Nil |-->o-->o-->o-->o-->o-->o-->o-->o-->o-->o-->o-->o-->o-->| |------>o------>o------>o------>o---------->o---------->| |-------------->o-------------->o---------->o---------->| |------------------------------------------>o---------->| </Code>
 */
@Test public void insertShuffledItemsWithLanes(){
  MockOrderedContentMirrorStoreStrategy ascStore=new MockOrderedContentMirrorStoreStrategy();
  MockOrderedContentMirrorStoreStrategy descStore=new MockOrderedContentMirrorStoreStrategy(OrderDirection.DESC);
  NodeBuilder ascIndex=EmptyNodeState.EMPTY_NODE.builder();
  NodeBuilder descIndex=EmptyNodeState.EMPTY_NODE.builder();
  NodeBuilder node;
  NodeBuilder index;
  String n00=KEYS[0];
  String n01=KEYS[1];
  String n02=KEYS[2];
  String n03=KEYS[3];
  String n04=KEYS[4];
  String n05=KEYS[5];
  String n06=KEYS[6];
  String n07=KEYS[7];
  String n08=KEYS[8];
  String n09=KEYS[9];
  String n10=KEYS[10];
  String n11=KEYS[11];
  String n12=KEYS[12];
  ascStore.setLane(0);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n06));
  descStore.setLane(0);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n06));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(OrderedContentMirrorStoreStrategy.EMPTY_NEXT,node.getProperty(NEXT).getValue(Type.STRINGS));
  node=descIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=descIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(OrderedContentMirrorStoreStrategy.EMPTY_NEXT,node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(1);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n05));
  descStore.setLane(1);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n05));
  index=ascIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,n05,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(OrderedContentMirrorStoreStrategy.EMPTY_NEXT,node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(OrderedContentMirrorStoreStrategy.EMPTY_NEXT,node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(0);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n09));
  descStore.setLane(0);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n09));
  index=ascIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,n05,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,n05,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(OrderedContentMirrorStoreStrategy.EMPTY_NEXT,node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(2);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n07));
  descStore.setLane(2);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n07));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,n05,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n07,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,n07,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(OrderedContentMirrorStoreStrategy.EMPTY_NEXT,node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(2);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n03));
  descStore.setLane(2);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n03));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,n03,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,n05,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n07,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,n07,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(1);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n01));
  descStore.setLane(1);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n01));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,n01,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,n05,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n07,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,n07,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,n01,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(0);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n02));
  descStore.setLane(0);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n02));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,n01,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,n05,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n07,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,n07,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n01,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(0);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n04));
  descStore.setLane(0);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n04));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,n01,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n05,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n07,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,n07,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n01,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(0);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n12));
  descStore.setLane(0);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n12));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,n01,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n05,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n07,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n12,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n12);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n12,n07,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n12);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n01,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(0);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n00));
  descStore.setLane(0);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n00));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n00,n01,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n00);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n05,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n07,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n12,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n12);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n12,n07,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n12);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n01,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n00,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n00);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(0);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n08));
  descStore.setLane(0);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n08));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n00,n01,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n00);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n05,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n07,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n08,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n08);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n12,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n12);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n12,n07,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n12);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n08,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n08);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n01,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n00,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n00);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(0);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n11));
  descStore.setLane(0);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n11));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n00,n01,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n00);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n05,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n07,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n08,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n08);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n11,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n11);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n12,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n12);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n12,n07,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n12);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n11,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n11);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n08,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n08);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n01,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n00,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n00);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  ascStore.setLane(3);
  ascStore.update(ascIndex,"/a",EMPTY_KEY_SET,newHashSet(n10));
  descStore.setLane(3);
  descStore.update(descIndex,"/a",EMPTY_KEY_SET,newHashSet(n10));
  node=ascIndex.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n00,n01,n03,n10),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n00);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n05,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n07,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n08,n10,n10,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n08);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n10,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n10);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n11,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n11);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n12,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=ascIndex.getChildNode(n12);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  index=descIndex;
  node=index.getChildNode(START);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n12,n10,n10,n10),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n12);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n11,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n11);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n10,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n10);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n09,n07,n07,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n09);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n08,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n08);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n07,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n07);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n06,n05,n03,""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n06);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n05,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n05);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n04,n03,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n04);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n03,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n03);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n02,n01,"",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n02);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n01,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n01);
  assertNotNull(node);
  assertEquals(ImmutableList.of(n00,"","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
  node=index.getChildNode(n00);
  assertNotNull(node);
  assertEquals(ImmutableList.of("","","",""),node.getProperty(NEXT).getValue(Type.STRINGS));
}
