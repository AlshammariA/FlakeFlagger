@Test public void testMigrateHA() throws Exception {
  String subsystemXml=readResource("subsystem_migration_ha.xml");
  newSubsystemAdditionalInitialization additionalInitialization=new newSubsystemAdditionalInitialization();
  KernelServices services=createKernelServicesBuilder(additionalInitialization).setSubsystemXml(subsystemXml).build();
  ModelNode model=services.readWholeModel();
  assertFalse(additionalInitialization.extensionAdded);
  assertTrue(model.get(SUBSYSTEM,SUBSYSTEM_NAME).isDefined());
  assertFalse(model.get(SUBSYSTEM,MESSAGING_ACTIVEMQ_SUBSYSTEM_NAME).isDefined());
  ModelNode migrateOp=new ModelNode();
  migrateOp.get(OP).set("migrate");
  migrateOp.get(OP_ADDR).add(SUBSYSTEM,SUBSYSTEM_NAME);
  ModelNode response=services.executeOperation(migrateOp);
  checkOutcome(response);
  ModelNode warnings=response.get(RESULT,"migration-warnings");
  assertEquals(warnings.toString(),1 + 1 + 3,warnings.asList().size());
  model=services.readWholeModel();
  assertFalse(model.get(SUBSYSTEM,MESSAGING_ACTIVEMQ_SUBSYSTEM_NAME,"server","unmigrated-backup","ha-policy").isDefined());
  assertFalse(model.get(SUBSYSTEM,MESSAGING_ACTIVEMQ_SUBSYSTEM_NAME,"server","unmigrated-shared-store","ha-policy").isDefined());
  ModelNode haPolicyForDefaultServer=model.get(SUBSYSTEM,MESSAGING_ACTIVEMQ_SUBSYSTEM_NAME,"server","default","ha-policy","shared-store-master");
  assertTrue(haPolicyForDefaultServer.isDefined());
  assertFalse(haPolicyForDefaultServer.get("failback-delay").isDefined());
  assertEquals(false,haPolicyForDefaultServer.get("failover-on-server-shutdown").asBoolean());
  ModelNode haPolicyForSharedStoreMasterServer=model.get(SUBSYSTEM,MESSAGING_ACTIVEMQ_SUBSYSTEM_NAME,"server","shared-store-master","ha-policy","shared-store-master");
  assertTrue(haPolicyForSharedStoreMasterServer.isDefined());
  assertFalse(haPolicyForSharedStoreMasterServer.get("failback-delay").isDefined());
  assertEquals("${failover.on.shutdown:true}",haPolicyForSharedStoreMasterServer.get("failover-on-server-shutdown").asString());
  ModelNode haPolicyForSharedStoreSlaveServer=model.get(SUBSYSTEM,MESSAGING_ACTIVEMQ_SUBSYSTEM_NAME,"server","shared-store-slave","ha-policy","shared-store-slave");
  assertTrue(haPolicyForSharedStoreSlaveServer.isDefined());
  assertEquals("${allow.failback.1:false}",haPolicyForSharedStoreSlaveServer.get("allow-failback").asString());
  assertFalse(haPolicyForSharedStoreSlaveServer.get("failback-delay").isDefined());
  assertEquals("${failover.on.shutdown.1:true}",haPolicyForSharedStoreSlaveServer.get("failover-on-server-shutdown").asString());
  ModelNode haPolicyForReplicationMasterServer=model.get(SUBSYSTEM,MESSAGING_ACTIVEMQ_SUBSYSTEM_NAME,"server","replication-master","ha-policy","replication-master");
  assertTrue(haPolicyForReplicationMasterServer.isDefined());
  assertEquals("${check.for.live.server:true}",haPolicyForReplicationMasterServer.get("check-for-live-server").asString());
  assertEquals("${replication.master.group.name:mygroup}",haPolicyForReplicationMasterServer.get("group-name").asString());
  ModelNode haPolicyForReplicationSlaveServer=model.get(SUBSYSTEM,MESSAGING_ACTIVEMQ_SUBSYSTEM_NAME,"server","replication-slave","ha-policy","replication-slave");
  assertTrue(haPolicyForReplicationSlaveServer.isDefined());
  assertEquals("${allow.failback.2:false}",haPolicyForReplicationSlaveServer.get("allow-failback").asString());
  assertFalse(haPolicyForReplicationSlaveServer.get("failback-delay").isDefined());
  assertEquals("${max.saved.replicated.journal.size:2}",haPolicyForReplicationSlaveServer.get("max-saved-replicated-journal-size").asString());
  assertEquals("${replication.master.group.name:mygroup2}",haPolicyForReplicationSlaveServer.get("group-name").asString());
}
